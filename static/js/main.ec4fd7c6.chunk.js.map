{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailydata","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","NamedNodeMap","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","coronaImage","image","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec4fd7c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3UBcE\",\"card\":\"Cards_card__3y_yE\",\"infected\":\"Cards_infected__41WDo\",\"recovered\":\"Cards_recovered__2tvSA\",\"deaths\":\"Cards_deaths__uaif6\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ( { data : {confirmed,recovered,deaths,lastUpdate }}) => {\r\n    console.log(lastUpdate);\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} seperator=\",\"/>    \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID_19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} seperator=\",\"/>    \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID_19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} seperator=\",\"/>    \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{ new Date(lastUpdate).toDateString() }</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID_19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Cards;","/*functions which will fetch some data*/\r\n\r\nimport axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{\r\n        const { data : { confirmed,recovered,deaths,lastUpdate } } = await axios.get(changeableUrl); //this is known as destructuring\r\n        return { confirmed,recovered,deaths,lastUpdate };\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n        \r\n        return modifiedData;\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() => {\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\n\r\n\r\nconst Charts = ({data: {confirmed,recovered,deaths},country}) => {\r\n    const [dailyData,setDailydata] = useState({});\r\n\r\n    useEffect( () => {\r\n        const fetchAPI = async() => {\r\n            setDailydata(await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI();\r\n    }, []);\r\n\r\n    console.log(confirmed,recovered,deaths);\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected','Recovered','Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0,0,255,0.5)',\r\n                            'rgba(0,255,0,0.5)',\r\n                            'rgba(255,0,0,0.5)'\r\n                        ],\r\n                        data: [confirmed.value,recovered.value,deaths.value]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: {display:NamedNodeMap, text: `Current state in ${country}`},\r\n                }\r\n\r\n                }\r\n            />\r\n        ):\r\n        null\r\n    );\r\n\r\n    const lineChart = (\r\n        dailyData.length ? \r\n            (\r\n                <Line data={{\r\n                    labels: dailyData.map(({date}) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({confirmed}) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor:  '#3333ff',\r\n                        fill: true,\r\n                    },{\r\n                        data: dailyData.map(({deaths}) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor:  'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n                        fill: true,\r\n                    }],\r\n                }}/>\r\n            )\r\n            :null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts;","import React , { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries}  from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries , setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        const fetchAPI = async() => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n    \r\n    console.log(fetchedCountries);\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n\r\nimport { Cards, Charts , CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\n\r\nimport coronaImage from './images/image.png';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data: {},\r\n        country: '',\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data:fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async(country) => {\r\n\r\n        //fetch the data\r\n        const fetchedData = await fetchData(country);\r\n        \r\n        this.setState({ data: fetchedData,\r\n                country: country,\r\n            });\r\n        //set the state\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        //destructue data for cards\r\n        const { data,country } = this.state;\r\n\r\n        return(<div className={styles.container}>\r\n            <img src={coronaImage} className={styles.image} alt=\"Covid_19 Image\"/>\r\n            <Cards data={this.state.data}/>\r\n            <CountryPicker handleCountryChange = {this.handleCountryChange}/>\r\n            <Charts data={data} country={country} />\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n/* axios for fetching api\r\n    react-chartjs-2 for visualizing through charts\r\n    react-countup for animations of count of cases\r\n\r\n    */\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3ZO1c\",\"image\":\"App_image__1H0Fh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__cQpom\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2HC9G\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}